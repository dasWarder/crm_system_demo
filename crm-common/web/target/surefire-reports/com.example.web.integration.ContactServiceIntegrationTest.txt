-------------------------------------------------------------------------------
Test set: com.example.web.integration.ContactServiceIntegrationTest
-------------------------------------------------------------------------------
Tests run: 10, Failures: 3, Errors: 3, Skipped: 0, Time elapsed: 0.569 s <<< FAILURE! - in com.example.web.integration.ContactServiceIntegrationTest
shouldFindAllContactsProperly  Time elapsed: 0.038 s  <<< FAILURE!
java.lang.AssertionError: 

Expecting:
  <[]>
to be equal to:
  <[Contact(id=1, firstName=Alex, lastName=Davidson, jobTitle=CEO, company=Harper Corporation, country=USA, email=alex_davidson@gmail.com, mobilePhone=+12027995223, user=null),
    Contact(id=2, firstName=Jack, lastName=Smith, jobTitle=Architecture, company=Peterson & Davids, country=Canada, email=jack_smith@gmail.com, mobilePhone=+14378455569, user=null),
    Contact(id=3, firstName=Maria, lastName=Smirnova, jobTitle=Lead Designer, company=ReversePyramid LTD, country=UK, email=maria_smirnova@gmail.com, mobilePhone=+447911123456, user=null),
    Contact(id=4, firstName=Martin, lastName=Laanpere, jobTitle=Software Engineer, company=TLU, country=Estonia, email=martin_laanpere@gmail.com, mobilePhone=+3724444444, user=null),
    Contact(id=5, firstName=Viktor, lastName=Volochay, jobTitle=Product manager, company=Wildmap, country=Ukraine, email=viktor_volochay@gmail.com, mobilePhone=+3805543321, user=null)]>
when recursively comparing field by field, but found the following difference:

Top level actual and expected objects differ:
- actual value   : []
- expected value : [Contact(id=1, firstName=Alex, lastName=Davidson, jobTitle=CEO, company=Harper Corporation, country=USA, email=alex_davidson@gmail.com, mobilePhone=+12027995223, user=null),
    Contact(id=2, firstName=Jack, lastName=Smith, jobTitle=Architecture, company=Peterson & Davids, country=Canada, email=jack_smith@gmail.com, mobilePhone=+14378455569, user=null),
    Contact(id=3, firstName=Maria, lastName=Smirnova, jobTitle=Lead Designer, company=ReversePyramid LTD, country=UK, email=maria_smirnova@gmail.com, mobilePhone=+447911123456, user=null),
    Contact(id=4, firstName=Martin, lastName=Laanpere, jobTitle=Software Engineer, company=TLU, country=Estonia, email=martin_laanpere@gmail.com, mobilePhone=+3724444444, user=null),
    Contact(id=5, firstName=Viktor, lastName=Volochay, jobTitle=Product manager, company=Wildmap, country=Ukraine, email=viktor_volochay@gmail.com, mobilePhone=+3805543321, user=null)]
actual and expected values are collections of different size, actual size=0 when expected size=5

The recursive comparison was performed with this configuration:
- overridden equals methods were used in the comparison
- these types were compared with the following comparators:
  - java.lang.Double -> DoubleComparator[precision=1.0E-15]
  - java.lang.Float -> FloatComparator[precision=1.0E-6]
- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).

	at com.example.web.integration.ContactServiceIntegrationTest.shouldFindAllContactsProperly(ContactServiceIntegrationTest.java:48)

shouldFindAllByFilterParamProperly  Time elapsed: 0.037 s  <<< FAILURE!
java.lang.AssertionError: 

Expecting:
  <[]>
to be equal to:
  <[Contact(id=3, firstName=Maria, lastName=Smirnova, jobTitle=Lead Designer, company=ReversePyramid LTD, country=UK, email=maria_smirnova@gmail.com, mobilePhone=+447911123456, user=null),
    Contact(id=4, firstName=Martin, lastName=Laanpere, jobTitle=Software Engineer, company=TLU, country=Estonia, email=martin_laanpere@gmail.com, mobilePhone=+3724444444, user=null)]>
when recursively comparing field by field, but found the following difference:

Top level actual and expected objects differ:
- actual value   : []
- expected value : [Contact(id=3, firstName=Maria, lastName=Smirnova, jobTitle=Lead Designer, company=ReversePyramid LTD, country=UK, email=maria_smirnova@gmail.com, mobilePhone=+447911123456, user=null),
    Contact(id=4, firstName=Martin, lastName=Laanpere, jobTitle=Software Engineer, company=TLU, country=Estonia, email=martin_laanpere@gmail.com, mobilePhone=+3724444444, user=null)]
actual and expected values are collections of different size, actual size=0 when expected size=2

The recursive comparison was performed with this configuration:
- overridden equals methods were used in the comparison
- these types were compared with the following comparators:
  - java.lang.Double -> DoubleComparator[precision=1.0E-15]
  - java.lang.Float -> FloatComparator[precision=1.0E-6]
- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).

	at com.example.web.integration.ContactServiceIntegrationTest.shouldFindAllByFilterParamProperly(ContactServiceIntegrationTest.java:64)

shouldUpdateContactByEmailProperly  Time elapsed: 0.029 s  <<< ERROR!
com.example.exception.ContactNotFoundException: The contact with email = maria_smirnova@gmail.com not found
	at com.example.web.integration.ContactServiceIntegrationTest.shouldUpdateContactByEmailProperly(ContactServiceIntegrationTest.java:86)

shouldSaveContactProperly  Time elapsed: 0.038 s  <<< FAILURE!
java.lang.AssertionError: 

Expecting:
  <Contact(id=6, firstName=David, lastName=Blane, jobTitle=HR, company=Apple, country=USA, email=david_blane@gmail.com, mobilePhone=+133333333, user=null)>
to be equal to:
  <Contact(id=1, firstName=David, lastName=Blane, jobTitle=HR, company=Apple, country=USA, email=david_blane@gmail.com, mobilePhone=+133333333, user=null)>
when recursively comparing field by field, but found the following difference:

field/property 'id' differ:
- actual value   : 6L
- expected value : 1L

The recursive comparison was performed with this configuration:
- overridden equals methods were used in the comparison
- these types were compared with the following comparators:
  - java.lang.Double -> DoubleComparator[precision=1.0E-15]
  - java.lang.Float -> FloatComparator[precision=1.0E-6]
- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).

	at com.example.web.integration.ContactServiceIntegrationTest.shouldSaveContactProperly(ContactServiceIntegrationTest.java:76)

shouldGetContactByEmailProperly  Time elapsed: 0.034 s  <<< ERROR!
com.example.exception.ContactNotFoundException: The contact with email = alex_davidson@gmail.com not found
	at com.example.web.integration.ContactServiceIntegrationTest.shouldGetContactByEmailProperly(ContactServiceIntegrationTest.java:127)

shouldGetContactByIdProperly  Time elapsed: 0.031 s  <<< ERROR!
com.example.exception.ContactNotFoundException: A contact with id=1 not found
	at com.example.web.integration.ContactServiceIntegrationTest.shouldGetContactByIdProperly(ContactServiceIntegrationTest.java:107)

